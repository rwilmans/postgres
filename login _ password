-- Sequence aanmaken; als een nieuw login wordt aangemaakt door de WH-kant, zal een oneven ID worden uitgegeven. 
-- Als een nieuw ID wordt gegenereerd aan de datamart-kant, dan een even ID worden uitgegeven.
CREATE SEQUENCE wh.login__login_id_seq
	INCREMENT 2
	START 1
	MINVALUE 1
	MAXVALUE 2147483647
	CACHE 1;
ALTER SEQUENCE wh.login__login_id_seq OWNER TO dwh_owner; 
 
 
-- Table: wh.login
-- DROP TABLE wh.login;
CREATE TABLE wh.login ( 
	login_id INTEGER NOT NULL DEFAULT NEXTVAL('wh.login__login_id_seq'::REGCLASS), 
	login CHARACTER VARYING(33) NOT NULL, 
	login_type_id INTEGER NOT NULL, 
	naam CHARACTER VARYING(100) NOT NULL, 
	is_vrouw BOOLEAN NOT NULL DEFAULT TRUE,
	emailadres CHARACTER VARYING(254) NOT NULL DEFAULT 'user@example.com',
	salt CHARACTER VARYING(29) NOT NULL DEFAULT generic.GEN_SALT('BF',13),
	wachtwoord CHARACTER VARYING(60) NOT NULL,
	secret_key CHARACTER VARYING(32) NOT NULL DEFAULT generic.gen_rnd_base32(32),	
	geldig_vanaf_ts TIMESTAMP NOT NULL DEFAULT CLOCK_TIMESTAMP(),
	CONSTRAINT pk_login PRIMARY KEY (login), 
	CONSTRAINT fk_login__login_type FOREIGN KEY (login_type_id) REFERENCES wh.login_type (login_type_id) ON UPDATE NO ACTION ON DELETE NO ACTION
);
ALTER TABLE wh.login OWNER TO dwh_owner;
GRANT SELECT ON TABLE wh.login TO dwh_readonly;

-- Index: idx_login__login_naam
-- DROP INDEX idx_login__login_naam;
CREATE UNIQUE INDEX idx_login__login_id ON wh.login (login_id) INCLUDE(login, naam);

CREATE POLICY plc_rls_login ON wh.login USING (login = SESSION_USER);

REVOKE SELECT ON TABLE wh.login FROM xxxxx;
GRANT SELECT (login_id, login, login_type_id, naam, is_vrouw, emailadres, salt, wachtwoord, geldig_vanaf_ts) ON TABLE wh.login TO xxxxxxx;


 /* */  
CREATE OR REPLACE FUNCTION wh.fnc_sync_login_role()
RETURNS TRIGGER AS 

$BODY$
DECLARE
	-- INSERT-waarden:
	_login TEXT;
	_login_id INTEGER;
	_wachtwoord TEXT;
		
	_aantal INT;	
	_aantal_versies INT;
	_aantal_dagen_valid INT;

	-- Einddatum geldigheid wachtwoord bepalen
	_geldig_tot TEXT;	

BEGIN
-- Aantal versies van het wachtwoord 'onthouden'
_aantal_versies := 5;
-- Aantal dagen dat een wachtwoord geldig blijft
-- Eventueel vanuit een meta-tabel ophalen, waarmee 'dynamisch'
_aantal_dagen_valid := 60; 

-- Corrigeren 
NEW.login := LOWER(BTRIM(NEW.login));

IF TG_OP = 'INSERT' THEN 
	-- Voor een INSERT, zou het login_id NULL moeten zijn en login NIET NULL
	IF NEW.login ~ '^_[\da-f]{32}$' THEN 
		-- Bestaat de login reeds in wh.login?
		SELECT login_id, login INTO _login_id, _login
		FROM wh.login
		WHERE login = NEW.login;

		IF NOT FOUND THEN 
			-- Deze mogen we toevoegen als ROLE, vermits deze niet al bestaat.
			-- Bestaat deze ROLE dus al?
			PERFORM 1
			FROM pg_catalog.pg_roles 
			WHERE LOWER(rolname) = NEW.login;

			-- ROLE bestaat dus niet - aanmaken:
			IF NOT FOUND THEN
				-- Salt genereren
				NEW.salt = generic.GEN_SALT('BF',13);

				-- Feitelijk de ROLE aanmaken
				IF NEW.wachtwoord IS NULL THEN 
					-- Geldig-tot bepalen ; dit is de geldigheidsduur van het account / ROLE. Als het wachtwoord leeg wordt gelaten, deze dan gelijk nemen aan het login ('_'+MD5(emailadres))
					-- Zodra het wachtwoord gewijzigd wordt, word ook de geldigheidsduur aangepast.
					SELECT (CURRENT_TIMESTAMP + INTERVAL '7 DAY')::TEXT INTO _geldig_tot; --Inclusief het huidige tijdstip...
					-- Wachtwoord is niet ingevuld, dus default op de gebruikersnaam instellen
					EXECUTE FORMAT('CREATE ROLE %s ENCRYPTED PASSWORD %s NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT LOGIN NOREPLICATION NOBYPASSRLS VALID UNTIL %s;' , NEW.login, QUOTE_LITERAL(NEW.login), QUOTE_LITERAL(_geldig_tot) );

					-- Nu het 'wachtwoord' omwerken naar de encrypted variant
					NEW.wachtwoord = generic.CRYPT(NEW.login,NEW.salt);
				ELSE 
					 -- Geldig-tot bepalen ; 60 dagen voor een net, ingevuld en goedgekeurd wachtwoord
					EXECUTE FORMAT ('SELECT (CURRENT_TIMESTAMP + INTERVAL ''%s DAY'')::TEXT', _aantal_dagen_valid) INTO _geldig_tot;
					EXECUTE FORMAT('SET password_encryption = ''SCRAM-SHA-256'';');
					EXECUTE FORMAT('CREATE ROLE %s ENCRYPTED PASSWORD %s NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT LOGIN NOREPLICATION NOBYPASSRLS VALID UNTIL %s;' , NEW.login, QUOTE_LITERAL(NEW.wachtwoord), QUOTE_LITERAL(_geldig_tot) );

					-- Nu het opgegeven wachtwoord omwerken naar de encrypted variant
					NEW.wachtwoord = generic.CRYPT(NEW.wachtwoord,NEW.salt);

				END IF;
				
				-- Nieuwe wachtwoord / salt kopieren naar wh.login_wachtwoord
				EXECUTE FORMAT ('INSERT INTO wh.login_wachtwoord (login_id, login, salt, wachtwoord, geldig_vanaf_ts) VALUES(%s,%s,%s,%s,CLOCK_TIMESTAMP());', 
									NEW.login_id, NEW.login, QUOTE_LITERAL(NEW.salt), QUOTE_LITERAL(NEW.wachtwoord));
				
				-- Rechten
				EXECUTE FORMAT ('GRANT web_app_login TO %s ;', NEW.login);
				EXECUTE FORMAT ('GRANT web_login TO %s ;', NEW.login);

				 -- Het wachtwoord-type zetten op 'SCRAM-SHA-256'
				EXECUTE FORMAT ('ALTER ROLE %s SET password_encryption = ''SCRAM-SHA-256'';', NEW.login);
				RETURN NEW;
			ELSE
				-- ROLE bestaat al
				RAISE NOTICE 'ROLE % bestaat al - niet aangemaakt en geen INSERT gedaan!', _login;
				RETURN NULL;
			END IF;
		ELSE
			-- Gevonden, dus bestaat al
			RAISE NOTICE 'Login % bestaat al (geregistreerd onder id: %)', NEW.login, _login_id; 
			RETURN NULL;
		END IF;
	ELSE 
		-- Melding doen
		RAISE NOTICE 'Login % voldoet niet aan de regels van een login ("_"+MD5(emailadres))', NEW.login;
		
		-- TODO: eventueel nog een ROLE aanmaken (default apotheker) op basis van emailadres... (tenzij emailadres leeg)
		RETURN NULL; -- Verder niets meer doen, dus de INSERT feitelijk annuleren
	END IF;
	
	-- ------------------------------------------------------------------------------------------------
ELSEIF TG_OP = 'UPDATE' THEN 
	-- Is wachtwoord gewijzigd?
	IF OLD.wachtwoord != NEW.wachtwoord THEN
		IF NEW.salt = OLD.salt OR NEW.salt !~ '^\$2a\$13\$' OR LENGTH(NEW.salt) != 29 THEN 
			-- Nieuwe SALT voldoet niet
			NEW.salt = generic.GEN_SALT('BF',13);
		END IF;

		-- LOGIN (=ROLE) bepalen
		SELECT login, login_id INTO _login, _login_id
		FROM wh.login
		WHERE login_id = NEW.login_id;

		-- Nu de controle of dit wachtwoord 'mag' - oftewel, het is niet gelijk aan één
		-- van de laatste 5 wachtwoorden.
		-- LET OP: Dit duurt wat langer, vanwege het bepalen van maximaal _aantal_versies de Blowfish(13)		
		PERFORM TRUE
		FROM wh.login_wachtwoord AS lw
		WHERE 	lw.login_id = _login_id AND
				generic.CRYPT(NEW.wachtwoord,salt) = lw.wachtwoord
		;

		IF NOT FOUND THEN
			-- JA, dit wachtwoord 'mag'

			-- Wachtwoord van de ROLE wijzigen voordat deze wordt ge-encrypt
			EXECUTE FORMAT('SET password_encryption = ''SCRAM-SHA-256'';');
			EXECUTE FORMAT('ALTER ROLE %s PASSWORD %s;', _login, QUOTE_LITERAL(NEW.wachtwoord));
			
			-- En de geldigheid aanpassen
			EXECUTE FORMAT ('SELECT (CURRENT_TIMESTAMP + INTERVAL ''%s DAY'')::TEXT', _aantal_dagen_valid) INTO _geldig_tot;
			EXECUTE FORMAT('ALTER ROLE %s VALID UNTIL %s;', _login, QUOTE_LITERAL(_geldig_tot));

			-- De Blowfish-variant:
			NEW.wachtwoord = CRYPT(NEW.wachtwoord,NEW.salt);

			-- Nieuwe wachtwoord / salt kopieren naar wh.login_wachtwoord
			EXECUTE FORMAT ('INSERT INTO wh.login_wachtwoord (login_id, login, salt, wachtwoord, geldig_vanaf_ts) VALUES(%s,%s,%s,%s,CLOCK_TIMESTAMP());', 
								_login_id, NEW.login, QUOTE_LITERAL(NEW.salt), QUOTE_LITERAL(NEW.wachtwoord));
			
		ELSE 
			-- NEE, dit wachtwoord mag niet; melding maken
			RAISE NOTICE 'Het wachtwoord "%" (login_id: %) is gelijk aan één van de laatste 5 wachtwoorden - niet toegestaan; wachtwoord (en salt) NIET gewijzigd.', NEW.wachtwoord, NEW.login_id;
			-- Laten zoals het was: 
			NEW.wachtwoord = OLD.wachtwoord;
			NEW.salt = OLD.salt;
		END IF;
		
	END IF; -- Einde wachtwoord gewijzigd

	-- Is LOGIN gewijzigd?
	IF NEW.login != OLD.login THEN 
		-- Het wachtwoord is NIET langer 'afhankelijk' is van de ROLE (zoals in het geval van het MD5-wachtwoord) 
		-- (vanwege gebruik SCRAM-SHA-256) en hoeft daarom ook niet gewijzigd te worden.		
		EXECUTE FORMAT('ALTER ROLE %s RENAME TO %s;', OLD.login, NEW.login);
	END IF; -- Einde Login gewijzigd

	RETURN NEW; -- Update gewoon uitvoeren 
	-- ------------------------------------------------------------------------------------------------
ELSEIF TG_OP = 'DELETE' THEN 
	-- ROLE bepalen: 
	SELECT login_id, login INTO _login_id, _login
	FROM wh.login
	WHERE login = OLD.login;
	
	-- 'Gewoon' verwijderen
	EXECUTE FORMAT('DROP USER IF EXISTS %s;',LOWER(OLD.login));
	RAISE NOTICE 'Verwijderen ROLE "%" (delete id: %)', _login, _login_id;
	RETURN NEW; -- En de delete gewoon laten uitvoeren
	-- ------------------------------------------------------------------------------------------------
ELSEIF TG_OP = 'TRUNCATE' THEN
	-- Dus een 'truncate'; alle users conform wh.login verwijderen 
	FOR _login IN SELECT login FROM wh.login LOOP
		RAISE NOTICE 'Verwijderen gebruiker "%", vanwege truncate', _login;
		EXECUTE 'DROP USER IF EXISTS ' ||  LOWER(_login) || ';';
	END LOOP;
	RETURN OLD; -- ... de truncate gewoon laten uitvoeren
	-- ------------------------------------------------------------------------------------------------
END IF;
 
END;

$BODY$
LANGUAGE plpgsql;

ALTER FUNCTION wh.fnc_sync_login_role() OWNER TO dwh_owner;

-- Trigger: trg_login_bijwerken on login
-- DROP TRIGGER trg_login_bijwerken ON login;
CREATE TRIGGER trg_login_bijwerken
    BEFORE INSERT OR UPDATE OR DELETE
    ON wh.login
    FOR EACH ROW
    EXECUTE PROCEDURE wh.fnc_sync_login_role();
CREATE TRIGGER trg_login_truncate
    BEFORE TRUNCATE
    ON wh.login
    EXECUTE PROCEDURE wh.fnc_sync_login_role();
    
    
 /* ------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /* ------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 
-- Table: login_wachtwoord
-- DROP TABLE login_wachtwoord;
CREATE TABLE wh.login_wachtwoord(
	login_id INTEGER NOT NULL, 
	login CHARACTER VARYING(33) NOT NULL,
	geldig_vanaf_ts TIMESTAMP(6) WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP(), 
	salt CHARACTER VARYING(29) NOT NULL DEFAULT generic.GEN_SALT('BF',13),
	wachtwoord CHARACTER VARYING(60) NOT NULL,
	CONSTRAINT pk_login_wachtwoord PRIMARY KEY (login_id, login, geldig_vanaf_ts), 
	CONSTRAINT fk_login_wachtwoord__login FOREIGN KEY (login) REFERENCES wh.login (login) ON UPDATE CASCADE ON DELETE CASCADE INITIALLY DEFERRED
);
ALTER TABLE wh.login_wachtwoord OWNER TO dwh_owner;
GRANT SELECT ON TABLE wh.login_wachtwoord TO GROUP dwh_readonly;
CREATE POLICY plc_rls_login_wachtwoord ON wh.login_wachtwoord USING (login = SESSION_USER);

 /* Functie voor het maximeren van het aantal 'onthouden' wachtwoorden */
CREATE OR REPLACE FUNCTION wh.fnc_prune_pw_history()
RETURNS TRIGGER AS 

$BODY$
DECLARE
	_aantal_versies INT; -- Aantal versies van het wachtwoord dat bewaard moet blijven
BEGIN
	-- Vijf historische en het huidige (5+1)
	_aantal_versies := 6;

	DELETE FROM wh.login_wachtwoord AS lw
	USING (	SELECT 	login_id, 
					geldig_vanaf_ts
			FROM (	SELECT 	login_id,
							geldig_vanaf_ts,
							ROW_NUMBER() OVER (PARTITION BY login_id ORDER BY geldig_vanaf_ts DESC) AS rijnr
					FROM wh.login_wachtwoord
					) AS l
			WHERE rijnr = _aantal_versies
			) AS d -- Alleen de _aantal_versies-de rij bewaren; deze datum is het afkap-punt
	WHERE 	lw.login_id = d.login_id AND 
			lw.geldig_vanaf_ts < d.geldig_vanaf_ts /* _aantal_versies = 5, dus datums verwijderen ouder dan de 5e */ 
	; 

	RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

ALTER FUNCTION wh.fnc_prune_pw_history() OWNER TO dwh_owner;

CREATE TRIGGER trg_fnc_prune_pw_history
    AFTER INSERT 
    ON wh.login_wachtwoord
    EXECUTE FUNCTION wh.fnc_prune_pw_history();
